"""Friendly Swapper â€” swaps position with any other friendly piece."""

from typing import List, Tuple
from game3d.pieces.enums import PieceType
from game3d.game.gamestate import GameState
from game3d.movement.movepiece import Move


def generate_friendly_swap_moves(state: GameState, x: int, y: int, z: int) -> List[Move]:
    """
    Generate all moves that swap this piece with any other friendly piece.
    Each move's `to_coord` is the target's position.
    Swap partner is stored in metadata.
    """
    moves: List[Move] = []
    board = state.board
    current_color = state.current
    self_pos = (x, y, z)

    # Validate piece exists and belongs to current player
    self_piece = board.piece_at(self_pos)
    if self_piece is None or self_piece.color != current_color:
        return moves

    # Scan entire board for other friendly pieces
    for target_x in range(9):
        for target_y in range(9):
            for target_z in range(9):
                target_pos = (target_x, target_y, target_z)

                if target_pos == self_pos:
                    continue  # skip self

                target_piece = board.piece_at(target_pos)
                if target_piece is None or target_piece.color != current_color:
                    continue

                moves.append(Move(
                    from_coord=self_pos,
                    to_coord=target_pos,
                    is_capture=False,
                    metadata={
                        "is_swap": True,
                        "swap_with": target_pos,  # the piece we're swapping with
                        "swap_from": self_pos     # where that piece will go
                    }
                ))

    return moves
