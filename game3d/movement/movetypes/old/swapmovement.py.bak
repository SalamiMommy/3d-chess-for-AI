"""Swap-Move â€” instantly swap positions with any friendly piece on the board."""

from typing import List, Tuple
from game3d.pieces.enums import Color
from game3d.game.gamestate import GameState
from game3d.movement.movepiece import Move
from game3d.common.common import in_bounds


def generate_swap_moves(state: GameState, x: int, y: int, z: int) -> List[Move]:
    """
    Generate swap moves with any friendly piece on the board.
    The piece at (x,y,z) and the chosen friendly piece exchange positions.
    """
    moves: List[Move] = []
    board = state.board
    current_color = state.current
    self_pos = (x, y, z)

    # Validate piece exists and belongs to current player
    piece = board.piece_at(self_pos)
    if piece is None or piece.color != current_color:
        return moves

    # Scan entire board for friendly pieces (excluding self)
    for tx in range(9):
        for ty in range(9):
            for tz in range(9):
                target_pos = (tx, ty, tz)
                if target_pos == self_pos:
                    continue  # cannot swap with itself
                target_piece = board.piece_at(target_pos)
                if target_piece is None:
                    continue
                if target_piece.color != current_color:
                    continue  # must be friendly

                # Build the swap move
                moves.append(Move(
                    from_coord=self_pos,
                    to_coord=target_pos,
                    is_capture=False,
                    metadata={
                        "is_swap": True,
                        "mechanic": "position_swap",
                        "flavor": "Reality folds as allies exchange places"
                    }
                ))

    return moves
