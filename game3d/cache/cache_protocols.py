# cache_protocols.py - NEW FILE
"""Standardized protocols for cache manager interfaces."""
from __future__ import annotations
from typing import Protocol, Optional, Tuple, Dict, Set, List, TYPE_CHECKING
from game3d.common.enums import Color, PieceType
from game3d.pieces.piece import Piece
from game3d.movement.movepiece import Move

if TYPE_CHECKING:
    from game3d.board.board import Board

class CacheManagerProtocol(Protocol):
    """Standardized interface for cache manager access."""

    # Core cache properties
    @property
    def occupancy(self): ...

    @property
    def piece_cache(self): ...

    # Movement effect queries
    def is_frozen(self, coord: Tuple[int, int, int], color: Color) -> bool: ...
    def is_movement_buffed(self, coord: Tuple[int, int, int], color: Color) -> bool: ...
    def is_movement_debuffed(self, coord: Tuple[int, int, int], color: Color) -> bool: ...

    # Special effect maps
    def black_hole_pull_map(self, controller: Color) -> Dict[Tuple[int, int, int], Tuple[int, int, int]]: ...
    def white_hole_push_map(self, controller: Color) -> Dict[Tuple[int, int, int], Tuple[int, int, int]]: ...

    # Geomancy and trail effects
    def is_geomancy_blocked(self, sq: Tuple[int, int, int], current_ply: int) -> bool: ...
    def current_trail_squares(self, controller: Color) -> Set[Tuple[int, int, int]]: ...

    # Piece queries
    def get_piece(self, coord: Tuple[int, int, int]) -> Optional[Piece]: ...
    def set_piece(self, coord: Tuple[int, int, int], piece: Optional[Piece]) -> None: ...
    def get_pieces_of_color(self, color: Color) -> List[Tuple[Tuple[int, int, int], Piece]]: ...

    # Board state
    @property
    def board(self) -> Board: ...

class MovementCacheProtocol(Protocol):
    """Standardized interface for movement caches."""

    def apply_move(self, mv: Move, color: Color) -> bool: ...
    def undo_move(self, mv: Move, color: Color) -> bool: ...
    def legal_moves(self, color: Color, **kwargs) -> List[Move]: ...
    def invalidate_square(self, coord: Tuple[int, int, int]) -> None: ...
    def invalidate_attacked_squares(self, color: Color) -> None: ...

class EffectCacheProtocol(Protocol):
    """Standardized interface for effect caches."""

    def apply_move(self, mv: Move, mover: Color, current_ply: int, board: Board) -> None: ...
    def undo_move(self, mv: Move, mover: Color, current_ply: int, board: Board) -> None: ...
    def clear(self) -> None: ...
    def invalidate(self) -> None: ...
